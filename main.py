import streamlit as st

st.set_page_config(page_title="–ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", layout="centered")

st.title("üßÆ –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")

base_value = st.number_input("üî¢ –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", value=0.0)

if "fields" not in st.session_state:
    st.session_state.fields = [{"title": "–ü–æ–ª–µ 1", "value": 0.0, "operation": "+"}]

if "last_result" not in st.session_state:
    st.session_state.last_result = None
    st.session_state.last_expression = ""

if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ"):
    st.session_state.fields.append(
        {"title": f"–ü–æ–ª–µ {len(st.session_state.fields) + 1}", "value": 0.0, "operation": "+"})

if len(st.session_state.fields) > 1 and st.button("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª–µ"):
    st.session_state.fields.pop()

st.markdown("### –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")

for i, field in enumerate(st.session_state.fields):
    col1, col2, col3 = st.columns([2, 2, 1])
    title = col1.text_input(f"–ù–∞–∑–≤–∞–Ω–∏–µ {i + 1}", value=field["title"], key=f"title_{i}")
    value = col2.number_input(f"–ó–Ω–∞—á–µ–Ω–∏–µ {i + 1}", value=field["value"], key=f"value_{i}")
    operation = col3.selectbox(
        "–û–ø–µ—Ä–∞—Ü–∏—è", ["+", "-", "*", "/", "%"], index=["+", "-", "*", "/", "%"].index(field["operation"]), key=f"op_{i}"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    st.session_state.fields[i] = {"title": title, "value": value, "operation": operation}

if st.button("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"):
    result = base_value
    expression = f"{base_value}"
    for field in st.session_state.fields:
        op = field["operation"]
        val = field["value"]
        if op == "+":
            result += val
        elif op == "-":
            result -= val
        elif op == "*":
            result *= val
        elif op == "/":
            result /= val if val != 0 else 1
        elif op == "%":
            result += result * (val / 100)
        expression += f" {op} {val}"

    st.session_state.last_result = result
    st.session_state.last_expression = expression

if st.session_state.last_result is not None:
    st.markdown("### –†–µ–∑—É–ª—å—Ç–∞—Ç")
    st.write(f"{st.session_state.last_expression} = **{st.session_state.last_result}**")
